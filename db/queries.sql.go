// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createCommentForPost = `-- name: CreateCommentForPost :one
INSERT INTO comments (
    post_id, user_id, text
) VALUES (
    $1, $2, $3
)
RETURNING post_id
`

type CreateCommentForPostParams struct {
	PostID sql.NullInt32
	UserID sql.NullInt32
	Text   string
}

func (q *Queries) CreateCommentForPost(ctx context.Context, arg CreateCommentForPostParams) (sql.NullInt32, error) {
	row := q.db.QueryRow(ctx, createCommentForPost, arg.PostID, arg.UserID, arg.Text)
	var post_id sql.NullInt32
	err := row.Scan(&post_id)
	return post_id, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    user_id, title, text
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type CreatePostParams struct {
	UserID sql.NullInt32
	Title  string
	Text   string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPost, arg.UserID, arg.Title, arg.Text)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, last_name, email, age
) VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type CreateUserParams struct {
	Name     string
	LastName string
	Email    string
	Age      int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Age,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCommentFromPost = `-- name: DeleteCommentFromPost :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) DeleteCommentFromPost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCommentFromPost, id)
	return err
}

const getCommentsOfPostByID = `-- name: GetCommentsOfPostByID :many
SELECT id, post_id, user_id, text FROM comments 
WHERE post_id = $1
`

func (q *Queries) GetCommentsOfPostByID(ctx context.Context, postID sql.NullInt32) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsOfPostByID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListOfUsersByIDs = `-- name: GetListOfUsersByIDs :many
SELECT id, name, last_name, email, age, created_at FROM users
WHERE id = ANY($1::int[])
`

func (q *Queries) GetListOfUsersByIDs(ctx context.Context, dollar_1 []int32) ([]User, error) {
	rows, err := q.db.Query(ctx, getListOfUsersByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastName,
			&i.Email,
			&i.Age,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, user_id, title, text FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Text,
	)
	return i, err
}

const getPostsOfUser = `-- name: GetPostsOfUser :many
SELECT id, user_id, title, text FROM posts
WHERE user_id = $1
`

func (q *Queries) GetPostsOfUser(ctx context.Context, userID sql.NullInt32) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, last_name, email, age, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Age,
		&i.CreatedAt,
	)
	return i, err
}

const joinCommentsAndUsersTables = `-- name: JoinCommentsAndUsersTables :one
SELECT comments.id, text, name, last_name 
FROM comments JOIN users ON user_id = users.id 
WHERE comments.post_id = $1
`

type JoinCommentsAndUsersTablesRow struct {
	ID       int32
	Text     string
	Name     string
	LastName string
}

func (q *Queries) JoinCommentsAndUsersTables(ctx context.Context, postID sql.NullInt32) (JoinCommentsAndUsersTablesRow, error) {
	row := q.db.QueryRow(ctx, joinCommentsAndUsersTables, postID)
	var i JoinCommentsAndUsersTablesRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Name,
		&i.LastName,
	)
	return i, err
}

const joinPostsAndUsersTables = `-- name: JoinPostsAndUsersTables :one
SELECT posts.id, title, text, name, last_name
FROM posts JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
`

type JoinPostsAndUsersTablesRow struct {
	ID       int32
	Title    string
	Text     string
	Name     string
	LastName string
}

func (q *Queries) JoinPostsAndUsersTables(ctx context.Context, id int32) (JoinPostsAndUsersTablesRow, error) {
	row := q.db.QueryRow(ctx, joinPostsAndUsersTables, id)
	var i JoinPostsAndUsersTablesRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.Name,
		&i.LastName,
	)
	return i, err
}
